{"id":"../node_modules/planck-js/lib/collision/AABB.js","dependencies":[{"name":"/Users/petro/Documents/physics/ui/package.json","includedInParent":true,"mtime":1604783233189},{"name":"/Users/petro/Documents/physics/ui/node_modules/planck-js/package.json","includedInParent":true,"mtime":499162500000},{"name":"../Settings","loc":{"line":23,"column":23},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/collision/AABB.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/Settings.js"},{"name":"../util/common","loc":{"line":24,"column":21},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/collision/AABB.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/util/common.js"},{"name":"../common/Math","loc":{"line":25,"column":19},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/collision/AABB.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/common/Math.js"},{"name":"../common/Vec2","loc":{"line":26,"column":19},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/collision/AABB.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/common/Vec2.js"}],"generated":{"js":"/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  } else if (typeof lower === 'object') {\n    this.upperBound.set(lower);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  b = b || this;\n\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n  return this;\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/planck-js/lib/collision/AABB.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}}],"sources":{"../node_modules/planck-js/lib/collision/AABB.js":"/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  } else if (typeof lower === 'object') {\n    this.upperBound.set(lower);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  b = b || this;\n\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n  return this;\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}"},"lineCount":258}},"error":null,"hash":"943ac7dc9f70380d8384a8b3e1f010a0","cacheData":{"env":{}}}