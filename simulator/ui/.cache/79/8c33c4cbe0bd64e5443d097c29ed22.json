{"id":"../node_modules/planck-js/lib/shape/ChainShape.js","dependencies":[{"name":"/Users/petro/Documents/physics/ui/package.json","includedInParent":true,"mtime":1604783233189},{"name":"/Users/petro/Documents/physics/ui/node_modules/planck-js/package.json","includedInParent":true,"mtime":499162500000},{"name":"../util/common","loc":{"line":25,"column":21},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/shape/ChainShape.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/util/common.js"},{"name":"../util/create","loc":{"line":26,"column":21},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/shape/ChainShape.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/util/create.js"},{"name":"../util/options","loc":{"line":27,"column":22},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/shape/ChainShape.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/util/options.js"},{"name":"../common/Math","loc":{"line":28,"column":19},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/shape/ChainShape.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/common/Math.js"},{"name":"../common/Transform","loc":{"line":29,"column":24},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/shape/ChainShape.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/common/Transform.js"},{"name":"../common/Rot","loc":{"line":30,"column":18},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/shape/ChainShape.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/common/Rot.js"},{"name":"../common/Vec2","loc":{"line":31,"column":19},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/shape/ChainShape.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/common/Vec2.js"},{"name":"../collision/AABB","loc":{"line":32,"column":19},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/shape/ChainShape.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/collision/AABB.js"},{"name":"../Settings","loc":{"line":33,"column":23},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/shape/ChainShape.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/Settings.js"},{"name":"../Shape","loc":{"line":34,"column":20},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/shape/ChainShape.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/Shape.js"},{"name":"./EdgeShape","loc":{"line":35,"column":24},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/shape/ChainShape.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/shape/EdgeShape.js"}],"generated":{"js":"/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\nShape.TYPES[ChainShape.TYPE] = ChainShape;\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n *\n * WARNING: The chain will not collide properly if there are self-intersections.\n */\nfunction ChainShape(vertices, loop) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n\n  this.m_isLoop = loop;\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\nChainShape.prototype._serialize = function() {\n  const data = {\n    type: this.m_type,\n    vertices: this.m_vertices,\n    isLoop: this.m_isLoop,\n    hasPrevVertex: this.m_hasPrevVertex,\n    hasNextVertex: this.m_hasNextVertex,\n  };\n  if (this.m_prevVertex) {\n    data.prevVertex = this.m_prevVertex;\n  }\n  if (this.m_nextVertex) {\n    data.nextVertex = this.m_nextVertex;\n  }\n  return data;\n};\n\nChainShape._deserialize = function(data) {\n  var shape = new ChainShape(data.vertices.map(Vec2._deserialize), data.isLoop);\n  if (data.prevVertex) {\n    shape._setPrevVertex(data.prevVertex);\n  }\n  if (data.nextVertex) {\n    shape._setNextVertex(data.nextVertex);\n  }\n  return shape;\n};\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n *\n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n *\n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_count = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count - 1;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * This always return false.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1));\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/planck-js/lib/shape/ChainShape.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}}],"sources":{"../node_modules/planck-js/lib/shape/ChainShape.js":"/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\nShape.TYPES[ChainShape.TYPE] = ChainShape;\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n *\n * WARNING: The chain will not collide properly if there are self-intersections.\n */\nfunction ChainShape(vertices, loop) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n\n  this.m_isLoop = loop;\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\nChainShape.prototype._serialize = function() {\n  const data = {\n    type: this.m_type,\n    vertices: this.m_vertices,\n    isLoop: this.m_isLoop,\n    hasPrevVertex: this.m_hasPrevVertex,\n    hasNextVertex: this.m_hasNextVertex,\n  };\n  if (this.m_prevVertex) {\n    data.prevVertex = this.m_prevVertex;\n  }\n  if (this.m_nextVertex) {\n    data.nextVertex = this.m_nextVertex;\n  }\n  return data;\n};\n\nChainShape._deserialize = function(data) {\n  var shape = new ChainShape(data.vertices.map(Vec2._deserialize), data.isLoop);\n  if (data.prevVertex) {\n    shape._setPrevVertex(data.prevVertex);\n  }\n  if (data.nextVertex) {\n    shape._setNextVertex(data.nextVertex);\n  }\n  return shape;\n};\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n *\n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n *\n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_count = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count - 1;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * This always return false.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1));\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n"},"lineCount":282}},"error":null,"hash":"b653fcf175e1f53624fc2f0eea13dd3f","cacheData":{"env":{}}}