{"id":"../node_modules/planck-js/lib/Solver.js","dependencies":[{"name":"/Users/petro/Documents/physics/ui/package.json","includedInParent":true,"mtime":1604783233189},{"name":"/Users/petro/Documents/physics/ui/node_modules/planck-js/package.json","includedInParent":true,"mtime":499162500000},{"name":"./Settings","loc":{"line":26,"column":23},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/Solver.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/Settings.js"},{"name":"./util/common","loc":{"line":27,"column":21},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/Solver.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/util/common.js"},{"name":"./common/Vec2","loc":{"line":29,"column":19},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/Solver.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/common/Vec2.js"},{"name":"./common/Math","loc":{"line":30,"column":19},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/Solver.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/common/Math.js"},{"name":"./Body","loc":{"line":32,"column":19},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/Solver.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/Body.js"},{"name":"./Contact","loc":{"line":33,"column":22},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/Solver.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/Contact.js"},{"name":"./Joint","loc":{"line":34,"column":20},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/Solver.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/Joint.js"},{"name":"./collision/TimeOfImpact","loc":{"line":36,"column":27},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/Solver.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/collision/TimeOfImpact.js"},{"name":"./collision/Distance","loc":{"line":40,"column":23},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/Solver.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/collision/Distance.js"}],"generated":{"js":"/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = contact.m_fixtureA.m_isSensor;\n        var sensorB = contact.m_fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"../node_modules/planck-js/lib/Solver.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}}],"sources":{"../node_modules/planck-js/lib/Solver.js":"/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = contact.m_fixtureA.m_isSensor;\n        var sensorB = contact.m_fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n"},"lineCount":904}},"error":null,"hash":"d7774ad9eb39e2f753e239207d80fb17","cacheData":{"env":{}}}