{"id":"../node_modules/planck-js/lib/collision/DynamicTree.js","dependencies":[{"name":"/Users/petro/Documents/physics/ui/package.json","includedInParent":true,"mtime":1604783233189},{"name":"/Users/petro/Documents/physics/ui/node_modules/planck-js/package.json","includedInParent":true,"mtime":499162500000},{"name":"../Settings","loc":{"line":23,"column":23},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/collision/DynamicTree.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/Settings.js"},{"name":"../util/common","loc":{"line":24,"column":21},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/collision/DynamicTree.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/util/common.js"},{"name":"../util/Pool","loc":{"line":25,"column":19},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/collision/DynamicTree.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/util/Pool.js"},{"name":"../common/Vec2","loc":{"line":26,"column":19},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/collision/DynamicTree.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/common/Vec2.js"},{"name":"../common/Math","loc":{"line":27,"column":19},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/collision/DynamicTree.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/common/Math.js"},{"name":"./AABB","loc":{"line":28,"column":19},"parent":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/collision/DynamicTree.js","resolved":"/Users/petro/Documents/physics/ui/node_modules/planck-js/lib/collision/AABB.js"}],"generated":{"js":"/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder(this.m_root);\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = this.computeHeight(node.child1.id);\n  var height2 = this.computeHeight(node.child2.id);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = child1.height;\n  var height2 = child2.height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  this.validateStructure(this.m_root);\n  this.validateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder(this.m_root);\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder(this.m_root);\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder(this.m_root);\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  var p1 = input.p1;\n  var p2 = input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  var maxFraction = input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(input.p1);\n      subInput.p2 = Vec2.clone(input.p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"../node_modules/planck-js/lib/collision/DynamicTree.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}}],"sources":{"../node_modules/planck-js/lib/collision/DynamicTree.js":"/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder(this.m_root);\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = this.computeHeight(node.child1.id);\n  var height2 = this.computeHeight(node.child2.id);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = child1.height;\n  var height2 = child2.height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  this.validateStructure(this.m_root);\n  this.validateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder(this.m_root);\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder(this.m_root);\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder(this.m_root);\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  var p1 = input.p1;\n  var p2 = input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  var maxFraction = input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(input.p1);\n      subInput.p2 = Vec2.clone(input.p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n"},"lineCount":916}},"error":null,"hash":"ff14a0574f781c2006d4d643d7c43a2b","cacheData":{"env":{}}}